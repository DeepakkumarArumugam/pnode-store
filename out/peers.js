// Generated by CoffeeScript 1.6.2
var Base, Peer, Peers, upnode, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

Base = require("./base");

upnode = require('upnode');

Peer = (function(_super) {
  __extends(Peer, _super);

  Peer.prototype.name = "Peer ";

  function Peer(store, dest) {
    var m,
      _this = this;

    this.store = store;
    m = String(dest).match(/^((.+):)?(\d+)$/);
    if (!m) {
      this.err("Invalid destination: '" + dest + "'");
    }
    this.host = m[2] || "localhost";
    this.port = parseInt(m[3], 10);
    this.log("create " + this.host + ":" + this.port);
    this.client = upnode.connect(this.port);
    this.client.on("up", function(remote) {
      _this.log("connected to " + _this.port);
      return _this.send({
        hello: 'world'
      });
    });
    this.client.on("down", function() {
      return _this.log("lost connection to " + _this.port);
    });
    this.client.on("reconnect", function() {
      return _this.log("trying " + _this.port + "...");
    });
  }

  Peer.prototype.send = function(args) {
    var method,
      _this = this;

    method = args.shift();
    args.push(function(t) {
      return _this.log("t: " + t);
    });
    return this.client(function(remote) {
      return remote[method].apply(remote, args);
    });
  };

  return Peer;

})(Base);

module.exports = Peers = (function(_super) {
  __extends(Peers, _super);

  Peers.prototype.name = "Peers";

  function Peers(store, peers) {
    this.store = store;
    if (peers == null) {
      peers = [];
    }
    this.log("create peers");
    _.bindAll(this);
    this.peers = [];
    _.each(peers, this.add);
    store = this.store;
    this.server = upnode(function(client, conn) {
      this.set = store._set;
      return this.destory = store._destroy;
    });
    this.server.listen(this.store.port);
    this.log("dnode server listening on " + this.store.port);
  }

  Peers.prototype.add = function(destination) {
    return this.peers.push(new Peer(this.store, destination));
  };

  Peers.prototype.send = function() {
    var args;

    args = _.toArray(arguments);
    return this.peers.forEach(function(p) {
      return p.send(args);
    });
  };

  return Peers;

})(Base);
