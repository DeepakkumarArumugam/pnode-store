// Generated by CoffeeScript 1.6.2
var Base, Packet, Peer, Peers, udp, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

Base = require("./base");

Packet = require("./packet");

udp = require("./udp");

Peer = (function(_super) {
  __extends(Peer, _super);

  Peer.prototype.name = "Peer ";

  function Peer(store, dest) {
    var m;

    this.store = store;
    m = String(dest).match(/^((.+):)?(\d+)$/);
    if (!m) {
      this.err("Invalid destination: '" + dest + "'");
    }
    this.host = m[2] || "localhost";
    this.port = parseInt(m[3], 10);
    this.log("create " + this.host + ":" + this.port);
  }

  Peer.prototype.pass = function(data) {
    var packet;

    data.dest = {
      host: this.host,
      port: this.port
    };
    packet = new Packet(data);
    return packet.send();
  };

  return Peer;

})(Base);

module.exports = Peers = (function(_super) {
  __extends(Peers, _super);

  Peers.prototype.name = "Peers";

  function Peers(store, peers) {
    this.store = store;
    if (peers == null) {
      peers = [];
    }
    this.log("create peers");
    _.bindAll(this);
    this.peers = [];
    _.each(peers, this.add);
    udp.recieve(this.store.port, this.handle);
  }

  Peers.prototype.add = function(destination) {
    return this.peers.push(new Peer(this.store, destination));
  };

  Peers.prototype.pass = function(data) {
    return this.peers.forEach(function(p) {
      return p.pass(data);
    });
  };

  Peers.prototype.handle = function(str, rinfo) {
    var data, packet;

    packet = new Packet(str, rinfo);
    data = packet.data;
    this.log("recieved data from: " + packet.src.port);
    if (data.action === 'set') {
      return this.store.setSession(data.sid, data.sess);
    }
  };

  return Peers;

})(Base);
