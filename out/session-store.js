// Generated by CoffeeScript 1.6.2
var P2PStore, Peers, connect, difflet, guid, isArray, udp, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

connect = require("connect");

udp = require("./udp");

_ = require("lodash");

difflet = require("difflet");

Peers = require("./peers");

isArray = function(val) {
  return Object.prototype.toString.call(val) === "[object Array]";
};

guid = function() {
  return (Math.random() * Math.pow(2, 32)).toString(16);
};

module.exports = P2PStore = (function(_super) {
  __extends(P2PStore, _super);

  P2PStore.prototype.name = "P2PStore";

  function P2PStore(options) {
    if (!options) {
      this.err("Must specify options");
    }
    P2PStore.__super__.constructor.call(this, options);
    if (!options.port) {
      this.err("Must specify a port");
    }
    this.port = options.port;
    this.peers = new Peers(this, options.peers);
    this.sessions = {};
    this.lasts = {};
  }

  P2PStore.prototype.propogate = function(data) {
    return this.peers.pass(data);
  };

  P2PStore.prototype.get = function(sid, fn) {
    this.log("get: " + sid);
    return fn(null, this.sessions[sid]);
  };

  P2PStore.prototype.setSession = function(sid, sess) {
    this.log("set: " + sid);
    if (this.sessions[sid]) {
      _.merge(this.sessions[sid], sess);
    } else {
      this.sessions[sid] = sess;
    }
    return null;
  };

  P2PStore.prototype.set = function(sid, sess, fn) {
    if (!fn) {
      return;
    }
    this.setSession(sid, sess);
    this.propogate({
      action: "set",
      sid: sid,
      sess: sess
    });
    return fn(null);
  };

  P2PStore.prototype.destroy = function(sid, fn) {
    this.log("delete: " + sid);
    delete this.sessions[sid];
    if (!fn) {
      return;
    }
    this.propogate({
      action: "delete",
      sid: sid
    });
    return fn(null);
  };

  P2PStore.prototype.toString = function() {
    return "" + this.name + ": " + this.port + ": ";
  };

  P2PStore.prototype.err = function(str) {
    throw new Error("" + this + str);
  };

  P2PStore.prototype.log = function() {
    return console.log.apply(console, [this.toString()].concat(_.toArray(arguments)));
  };

  return P2PStore;

})(connect.session.Store);
