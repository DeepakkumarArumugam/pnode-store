// Generated by CoffeeScript 1.6.2
var Base, Packet, dgram, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

Base = require("./base");

dgram = require("dgram");

module.exports = Packet = (function(_super) {
  __extends(Packet, _super);

  Packet.prototype.name = "Packet";

  function Packet(data, rinfo) {
    var e, _ref, _ref1;

    this.data = data;
    this.rinfo = rinfo;
    if (this.data instanceof Buffer) {
      this.data = this.data.toString();
    }
    if (_.isString(this.data)) {
      try {
        this.data = JSON.parse(this.data);
      } catch (_error) {
        e = _error;
        this.err("Invalid data: " + e);
      }
    }
    if (this.data.dest) {
      this.dest = this.data.dest;
    }
    this.src = {
      host: (_ref = this.rinfo) != null ? _ref.address : void 0,
      port: (_ref1 = this.rinfo) != null ? _ref1.port : void 0
    };
  }

  Packet.prototype.send = function(callback) {
    var client, message, str,
      _this = this;

    this.data.src = {
      host: this.data.host,
      port: this.data.port
    };
    this.log("send to " + this.dest.port);
    str = JSON.stringify(this.data);
    message = new Buffer(str);
    client = dgram.createSocket("udp4");
    client.on('message', function() {
      return _this.log("on message", arguments);
    });
    return client.send(message, 0, message.length, this.dest.port, this.dest.host, function(err, bytes) {
      return client.close();
    });
  };

  Packet.prototype.recieve = function(port, callback) {};

  return Packet;

})(Base);
